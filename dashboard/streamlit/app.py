# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NA-hUTdgeLbS3R09mg_mMKE9oUPGAMdr
"""

# Streamlit Starter App for Etihad CO‚ÇÇ Dashboard

import streamlit as st
import pandas as pd
import plotly.express as px

# Load dataset
@st.cache_data
def load_data():
    df = pd.read_csv('/content/drive/MyDrive/Etihad_CO2_Optimization_Dashboard/data/processed/etihad_dashboard_demo_cleaned.csv', low_memory=False)
    return df

df = load_data()

# Sidebar filters
st.sidebar.title("Filters")
selected_origin = st.sidebar.selectbox("Select Origin Airport", df['Origin'].unique())
selected_aircraft = st.sidebar.selectbox("Select Aircraft Type", df['Aircraft_Code'].unique())

# Filtered dataset
filtered_df = df[(df['Origin'] == selected_origin) & (df['Aircraft_Code'] == selected_aircraft)]

# Main Page
st.title("‚úàÔ∏è Etihad Airways - CO‚ÇÇ Optimization Dashboard")

# Tabs
tab1, tab2, tab3, tab4, tab5 = st.tabs(["Home (ESG Summary)", "Route Insights", "Aircraft Insights", "Anomaly Detection", "Weather Impact"])

with tab1:
    st.header("üåç ESG Validation Summary")
    st.metric("Total Flights", f"{len(df):,}")
    st.metric("Total Adjusted Fuel Burn (kg)", f"{df['Adjusted_Fuel_Burn_kg'].sum():,.2f}")
    st.metric("Total Adjusted CO‚ÇÇ (kg)", f"{df['Adjusted_CO2_kg'].sum():,.2f}")
    st.metric("CO‚ÇÇ ESG Match (%)", "0.24%")  # You can make dynamic if needed

with tab2:
    st.header("üõ¨ Top CO‚ÇÇ Routes")
    route_co2 = df.groupby(['Origin', 'Destination'])['Adjusted_CO2_kg'].sum().reset_index()
    fig = px.bar(route_co2, x='Origin', y='Adjusted_CO2_kg', color='Destination', title="Top CO‚ÇÇ Emitting Routes")
    st.plotly_chart(fig)

with tab3:
    st.header("‚úàÔ∏è CO‚ÇÇ by Aircraft Type")
    acft_co2 = df.groupby('Aircraft_Code')['Adjusted_CO2_kg'].sum().reset_index()
    fig2 = px.pie(acft_co2, names='Aircraft_Code', values='Adjusted_CO2_kg', title='CO‚ÇÇ Emission Share by Aircraft')
    st.plotly_chart(fig2)

with tab4:
    st.header("‚ö° ML Anomaly Detection")
    if 'route_efficiency_score' in df.columns:
        fig3 = px.histogram(df, x='route_efficiency_score', nbins=50, title="Route Efficiency Score Distribution")
        st.plotly_chart(fig3)
    else:
        st.warning("Anomaly data not available in this dataset.")

with tab5:
    st.header("‚òÅÔ∏è Weather Impact")
    if 'Weather_Penalty_Index' in df.columns:
        fig4 = px.histogram(df, x='Weather_Penalty_Index', nbins=50, title="Weather Penalty Index Distribution")
        st.plotly_chart(fig4)
    else:
        st.warning("Weather data not available.")

st.success("Dashboard Ready üöÄ")